/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/rutu-k/sample-controller/pkg/apis/helloworld/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HelloLister helps list Hellos.
type HelloLister interface {
	// List lists all Hellos in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Hello, err error)
	// Hellos returns an object that can list and get Hellos.
	Hellos(namespace string) HelloNamespaceLister
	HelloListerExpansion
}

// helloLister implements the HelloLister interface.
type helloLister struct {
	indexer cache.Indexer
}

// NewHelloLister returns a new HelloLister.
func NewHelloLister(indexer cache.Indexer) HelloLister {
	return &helloLister{indexer: indexer}
}

// List lists all Hellos in the indexer.
func (s *helloLister) List(selector labels.Selector) (ret []*v1alpha1.Hello, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Hello))
	})
	return ret, err
}

// Hellos returns an object that can list and get Hellos.
func (s *helloLister) Hellos(namespace string) HelloNamespaceLister {
	return helloNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HelloNamespaceLister helps list and get Hellos.
type HelloNamespaceLister interface {
	// List lists all Hellos in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Hello, err error)
	// Get retrieves the Hello from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Hello, error)
	HelloNamespaceListerExpansion
}

// helloNamespaceLister implements the HelloNamespaceLister
// interface.
type helloNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Hellos in the indexer for a given namespace.
func (s helloNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Hello, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Hello))
	})
	return ret, err
}

// Get retrieves the Hello from the indexer for a given namespace and name.
func (s helloNamespaceLister) Get(name string) (*v1alpha1.Hello, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hello"), name)
	}
	return obj.(*v1alpha1.Hello), nil
}
